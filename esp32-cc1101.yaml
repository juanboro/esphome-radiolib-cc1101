# based on https://github.com/dbuezas/esphome-cc1101

substitutions:
  # MQTT Credentials
  mqtt_host: !secret mqtt_host
  mqtt_remote_raw_topic: esphome/rawrf
  
esphome:
  name: esp32-dev1
  friendly_name: ESP32 Dev Work

  platformio_options:
    lib_ldf_mode: "deep+" # only necessary for arduino platform

  libraries:
    - rtl_433_Decoder_ESP=file:///home/jdkrause/github.com/rtl_433_Decoder_ESP
    - RadioLib

esp32:  
  board: esp32dev
  framework:
    type: esp-idf
#    type: arduino

wifi:
  ssid: !secret wifi_name
  password: !secret wifi_pass
  fast_connect: true
#  power_save_mode: HIGH

logger:
#  level: VERBOSE
  level: INFO
  
captive_portal:

api:

mqtt:
  broker: ${mqtt_host}
  id: mqtt_client

web_server:
  port: 80

spi:
  # these are the default VSPI pins to use on ESP32
  clk_pin: 18   # CC1001 pin 5
  mosi_pin: 23  # CC1001 pin 6
  miso_pin: 19  # CC1001 pin 7

external_components:
  - source:
      type: local
      path: components

radiolib_cc1101:
  id: mycc1101
  cs_pin: 5 # CC1101 pin 4
  filter: 150khz
  rx_pin:
    number: 32 # This is CC1101 GDO0 pin 3
    allow_other_uses: true
  tx_pin:
    number: 32 # This is also GDO0
    allow_other_uses: true

remote_receiver:
  - id: rf_receiver
    idle: 100ms
    pin:
      number: 32 # This is also GDO0
      allow_other_uses: true
      id: cc1101_gd0_recv

#    dump: raw

    on_raw:
      then:
        # mqtt publish ook pulse data that rtl_433 can decode as input
        - lambda: |-
            std::string s;
            for (int i=0; i<x.size()-1;i+=2) {
              s+=str_sprintf("%d %d\n",x[i],-x[i+1]);
            }
            if (x.size()%2) s.append(str_sprintf("%d 10000\n",x.back()));
            s.append(str_sprintf(";end\n"));
            id(mqtt_client).publish("${mqtt_remote_raw_topic}", s);

# wip
remote_transmitter:
  - id: rf_transmitter
    pin:
      number: 32 # This is GDO0
      allow_other_uses: true
      id: cc1101_gd0_xmit
    on_transmit:
      then:
        - lambda: id(mycc1101).xmit();
    on_complete:
      then:
        - lambda: id(mycc1101).recv();
    carrier_duty_percent: 100%

ota:
  platform: esphome
  on_begin:
    - lambda: id(mycc1101).standby();
