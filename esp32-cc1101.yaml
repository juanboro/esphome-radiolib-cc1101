esphome:
  platformio_options:
    lib_ldf_mode: "deep+" # only necessary for arduino platform
  libraries:
    - RadioLib

external_components:
  - source: github://juanboro/esphome-radiolib-cc1101@main
    components: [ radiolib_cc1101 ]

packages:
  cc1101_controls: !include cc1101-controls.yaml

spi:
  # these are the default VSPI pins to use on ESP32
  clk_pin: 18   # CC1001 pin 5
  mosi_pin: 23  # CC1001 pin 6
  miso_pin: 19  # CC1001 pin 7

remote_receiver:
  - id: rf_receiver
    idle: 10ms
    pin:
      number: 32 # This is also GDO0
      allow_other_uses: true
      mode:
        input: true
      id: cc1101_gd0_recv

    # ESP IDF new remote SPECIFIC 
    # https://docs.espressif.com/projects/esp-idf/en/v5.4/esp32/api-reference/peripherals/rmt.html#rmt-resource-allocation
    # https://www.espressif.com/sites/default/files/documentation/esp32_technical_reference_manual_en.pdf#rmt
    # https://esphome.io/components/remote_receiver#esp32-idf-configuration-variables
    # the esp-32 has 2k of symbol memory (512 symbols)
    # rmt_symbols sets mem_block_symbols in esp channel config - the esphome default will be 192 symbols/channel
    # In this example - we max things out at 448 symbols for the receive (the transmit can recycle symbol memory - so a smaller symbol size of the default 64 is ok)
    # note that if additional remotes are added (up to 8) - then the memory will need apportioned as necessary.  Even 448 symbols (<1000 pulses) isn't real great 
    # for some of what we'd like to receive on the cc1101.
    rmt_symbols: 448
    # generally - receive_symbols only makes sense to be bigger than rmt_symbols on systems w/ dma support (not the original esp32)
    # but should always be set to at least rmt_symbols...
    receive_symbols: 448
#    dump: raw

    # Alternativly with this pr: <url> use the software-interupt remote driver:
    use_esp32_rmt: false

remote_transmitter:
  - id: rf_transmitter
    pin:
      number: 32 # This is also GDO0
      allow_other_uses: true
      mode: 
        output: true
        pullup: true
        open_drain: true
      id: cc1101_gd0_xmit

    on_transmit:
      then:
        - lambda: |-
            id(mycc1101).xmit();
            //id(rf_transmitter).setup(); // currently necessary for legacy ESP-32 RMT (and doesn't work w/ new one either way)
    on_complete:
      then:
        - lambda: |-
            id(mycc1101).recv();
    carrier_duty_percent: 100%

radiolib_cc1101:
  id: mycc1101
  cs_pin: 5 # CC1101 pin 4

  # optionally define rx_pin to allow monitoring rx rssi
  rx_pin:
    number: 32 # This is CC1101 GDO0 pin 3
    allow_other_uses: true

#  other optional settings.. (use control settings to verify they work and then set)
  filter: 468khz # RX filter BW (58-812kHz)
  bitrate: 40 # bitrate (0.025-600kbps)
  reg_agcctrl0: 0xb2 # agcctrol0 register setting
  reg_agcctrl1: 0x00 # agcctrol1 register setting
  reg_agcctrl2: 0xc7 # agcctrol2 register setting

ota:
  platform: esphome
  on_begin:
    - lambda: id(mycc1101).standby();
